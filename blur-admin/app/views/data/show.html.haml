- content_for :title, 'Data'

#data-dtables
  #dtables-title
    %h2 Tables
    %br
  %table#dtables-table
    %tr#dtables-table-header
      %th Table
      %th Shards
      %th Count
      %th Size
      %th
        Queries/Second
      %th Enabled
      %th Actions

    -@tables.each do |table|
      %tr
        %td
          %b
            =table
        %td
          .table-def
            %ul
              -get_shards(table).each do |host, shards|
                %li#hosts{:id=>"#{host}"}
                  %a{:href=>'#'}= host
                  %ul
                    -shards.each do |shard|
                      %li#shards{:id=>"#{host}_#{shard}"}
                        %a{:href=>'#'}= shard
        %td
          =get_count(table)
        %td
          -a_blur_table = get_a_blur_table(table)
          -if (a_blur_table != nil)
            =number_to_human_size(a_blur_table.current_size)
          -else
            not available
        %td
          -if (a_blur_table != nil)
            =number_with_delimiter(a_blur_table.query_usage, :delimiter => ',')
          -else
            not available
        %td
          %input{:type => "checkbox", :checked => @tdesc[table].isEnabled, :class => "enable", :id => table}
        %td
          %input{:type => "button", :class => "delete-table", :value => "delete", :id => table}
      %tr
        %td{:colspan => 7}
          %b location:
          =get_loc(table)
      %tr
        %td{:colspan => 7}
          %b definition:
          .table-def
            %ul
              %li#families{:id=>"#{table}"}
                %a{:href=>'#'}Column Families
                %ul
                  -@tschema[table].each do |family, sets|
                    %li#family{:id=>"#{table}.#{family}"}
                      %a{:href=>'#'}
                        = family
                        (
                        =@tdesc[table].analyzerDefinition.fullTextAnalyzerClassName
                        )
                      %ul
                        -sets.each do |word|
                          %li#column{:id=>"#{table}.#{family}.#{word}"}
                            %a{:href=>'#'}= word
      %tr
    -if @tables.empty?
      %tr
        %td{:colspan => 7, :class => 'error'}
          %b No Available Tables
-content_for :javascript do
  =javascript_include_tag 'jquery.jstree','compiled/data'

