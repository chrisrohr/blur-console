- content_for :title, 'Data'
- content_for :javascript do
  =javascript_include_tag 'jquery.jstree','compiled/data'

#data-dtables
  #dtables-title
    %h2 Tables
    %br
  %table#dtables-table
    %tr#dtables-table-header
      %th Table
      %th Shards
      %th Count
      %th Size
      %th Queries/Second
      %th Enabled
      %th Actions

    -@tables.each do |table|
      %tr.tr-underline{:id => table}
        %td
          %b
            name:
          =table
        %td
          .table-def
            %ul
              -shards(table).each do |host, shards|
                %li#hosts{:id=>"#{host}"}
                  %a{:href=>'#'}= host
                  %ul
                    -shards.each do |shard|
                      %li#shards{:id=>"#{host}_#{shard}"}
                        %a{:href=>'#'}= shard
        %td
          = number_with_delimiter(@tcount[table], :delimiter => ',')
        %td
          -blur_table = BlurTables.find_by_table_name table
          -if blur_table
            =number_to_human_size(blur_table.current_size)
          -else
            not available
        %td
          -if blur_table
            =number_with_delimiter(blur_table.query_usage, :delimiter => ',')
          -else
            not available
        %td
          = check_box_tag '', "1", @tdesc[table].isEnabled, :class=>'enable', :table_name => table
        %td
          = submit_tag 'delete', :class=>'delete-table', :table_name => table
      %tr{:id => table}
        %td{:colspan => 7}
          %b location:
          = @tdesc[table].tableUri
      %tr.tr-underline{:id => table}
        %td{:colspan => 7}
          %b definition:
          .table-def
            %ul
              %li#families{:id=>"#{table}"}
                %a{:href=>'#'}Column Families
                %ul
                  -@tschema[table].each do |family, sets|
                    %li#family{:id=>"#{table}.#{family}"}
                      %a{:href=>'#'}
                        = "#{family} (#{@tdesc[table].analyzerDefinition.fullTextAnalyzerClassName})"
                      %ul
                        -sets.each do |word|
                          %li#column{:id=>"#{table}.#{family}.#{word}"}
                            %a{:href=>'#'}= word
    -if @tables.empty?
      %tr
        %td{:colspan => 7, :class => 'error'}
          %b No Available Tables

#confirm.ui-confirm{:hidden => true}
  #confirm-dialog
  #confirm-buttons
    %form
      %input#underlying-confirm{:type => "checkbox", :checked => false}
        Delete underlying table index
      %button#confirm-submit.cancel{:type => "button"}
        Cancel
      %button#confirm-submit.ok{:type => "button"}
        Delete