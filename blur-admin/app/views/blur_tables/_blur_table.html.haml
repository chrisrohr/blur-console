- nil_message = "Not Available"

%h3.blur_table{ :id => "blur_table_#{blur_table.id}" }
  %span.table_name
    = blur_table.table_name
  %span.hosts
    - if blur_table.server
      = blur_table.hosts.keys.length
    - else
      = nil_message
  %span.shards
    - if blur_table.server
      = blur_table.hosts.values.flatten.length
    - else
      = nil_message

  %span.count= blur_table.record_count ? number_with_delimiter(blur_table.record_count, :delimiter => ',') : nil_message
  %span.size= blur_table.current_size ? number_to_human_size(blur_table.current_size, :precision => 3) : nil_message
  %span.second= blur_table.query_usage ? number_with_delimiter(blur_table.query_usage, :delimiter => ',') : nil_message
  %span.status= blur_table.is_enabled? ? "Enabled" : "Disabled"


.blur_table{:id => "blur_table_#{blur_table.id}"}
  .location
    %b Location:
    = blur_table.table_uri ? blur_table.table_uri : nil_message
  - if can? :update, :blur_tables
    = form_tag "/blur_tables/#{blur_table.id}", :class => 'update', :method => :put, :remote => true do
      - if !blur_table.is_enabled?
        = hidden_field_tag 'enable', true
        = submit_tag 'Enable Table', :confirm => "Are you sure?"
      - else
        = hidden_field_tag 'disable', true
        = submit_tag 'Disable Table', :confirm => "Are you sure?"
  - if can? :delete, :blur_tables and  !blur_table.is_enabled?
    = form_tag "/blur_tables/#{blur_table.id}", :class => 'delete', :method => :delete, :remote => true do
      = hidden_field_tag :delete_index
      = tag :input, :type => :button, :value => 'Delete Table', :class => :delete_blur_table_button

  = link_to "Schema", schema_blur_table_path(blur_table), :remote => true, :id => 'schema'
  = link_to "Hosts", hosts_blur_table_path(blur_table), :remote => true, :id => 'hosts'
