- if @results and not @results.empty?
  #results_info
    = "#{@result_count} results found"
  #results_section
    %table#result_table.result_table
      %thead
        %tr.familysets
          %th.rowId
          - @schema.each do |family, columns|
            %th{:colspan => columns.count, :children => columns.count, :class => "family_-sep-_#{family}", :id => family }= family
        %tr.columnsets
          %th.rowId rowId
          - @schema.each do |family, columns|
            - columns.each do |column|
              %th{:class => "column_-sep-_#{family}_-sep-_#{column} family_-sep-_#{family}"}
                = column.gsub(/([A-Z])/, '&shy;\1').html_safe

      %tbody
        - @results.each do |result|
          - result_stripe = cycle('odd', 'even', :name => 'row-cycle')
          - max_record_count = result[:max_record_count]

          - max_record_count.times do |i|
            %tr{:class => result_stripe}

              - @schema.each_with_index do |(column_family, columns), j|
                - if i == 0 and j == 0
                  %td{:title => "rowId"}= result[:id]
                - if i == 1 and j == 0
                  %td{:rowspan => max_record_count - 1}
                - record = result[column_family][i]

                - if record # then insert the record
                  - columns.each do |column|
                    %td{:class => "#{((j % 2) == 1 ? 'even' : 'odd' )} column_-sep-_#{column_family}_-sep-_#{column} family_-sep-_#{column_family}",
                        :title => column}
                      = record[column]

                - else # fill in the remaining space with a big cell
                  %td{:class => "#{((j % 2) == 1 ? 'even' : 'odd' )} family_-sep-_#{column_family} family_-sep-_#{column_family}_-sep-_empty",
                      :colspan => columns.length}
